{"version":3,"sources":["store/quiz-context.js","components/Options.js","components/Quiz.js","pages/Result.js","components/SideNav.js","components/Timer.js","App.js","index.js"],"names":["QuizContext","React","createContext","ques","currQues","options","isLoading","updateQues","score","QuizContextProvider","props","useState","setQues","setOptions","setIsLoading","setCurrQues","setScore","useEffect","a","fetch","response","json","data","results","optionsArr","forEach","d","opts","incorrect_answers","ans","correct_answer","splice","Math","floor","random","push","fetchQuizData","Provider","value","e","trim","target","innerText","children","Options","useContext","className","map","opt","index","onClick","Quiz","style","width","question","Result","quizContext","length","SideNav","document","querySelectorAll","ele","classList","remove","querySelector","add","id","q","Timer","initialMinute","initialSeconds","minutes","setMinutes","seconds","setSeconds","myInterval","setInterval","clearInterval","isOver","App","content","timeLeft","setTimeLeft","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9b2e1cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst QuizContext = React.createContext({\r\n    ques: [],\r\n    currQues: 0,\r\n    options: [],\r\n    isLoading: true,\r\n    updateQues: () => { },\r\n    score: 0\r\n});\r\n\r\nexport const QuizContextProvider = (props) => {\r\n    const [ques, setQues] = useState([]);\r\n    const [options, setOptions] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [currQues, setCurrQues] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n\r\n    useEffect(() => {\r\n        async function fetchQuizData() {\r\n\r\n            const response = await fetch(`https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple`);\r\n            const data = await response.json();\r\n\r\n            setQues(data.results);\r\n\r\n            const optionsArr = [];\r\n            data.results.forEach(d => {\r\n                const opts = d.incorrect_answers;\r\n                const ans = d.correct_answer;\r\n\r\n                opts.splice(\r\n                    Math.floor(Math.random() * 3),\r\n                    0,\r\n                    ans\r\n                );\r\n                optionsArr.push(opts);\r\n            });\r\n            setOptions(optionsArr);\r\n            setIsLoading(false);\r\n        }\r\n\r\n        fetchQuizData();\r\n    }, []);\r\n\r\n\r\n    const updateQues = (e) => {\r\n\r\n        if (ques[currQues].correct_answer.trim() === e.target.innerText.trim()) {\r\n            setScore(score + 1);\r\n        }\r\n        setCurrQues(currQues + 1);\r\n    };\r\n\r\n\r\n    return (\r\n        <QuizContext.Provider value={{\r\n            ques,\r\n            options,\r\n            currQues,\r\n            isLoading,\r\n            score,\r\n            updateQues\r\n        }}>\r\n            {props.children}\r\n        </QuizContext.Provider>\r\n    );\r\n};\r\n\r\nexport default QuizContext;","import React, { useContext } from 'react'\r\nimport QuizContext from '../store/quiz-context';\r\n\r\nconst Options = () => {\r\n    const { updateQues, options, currQues } = useContext(QuizContext);\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {options[currQues].map((opt, index) => <li key={index} className=\"list-group-item\" onClick={updateQues}>{opt}</li>)}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Options;\r\n","import React, { useContext } from 'react'\r\nimport Options from './Options';\r\nimport QuizContext from '../store/quiz-context';\r\n\r\n\r\nconst Quiz = () => {\r\n    const { ques, currQues, isLoading } = useContext(QuizContext);\r\n\r\n    return (\r\n        <div className=\"card mx-auto my-2\" style={{ width: '18rem' }}>\r\n            {isLoading && <p>Loading...</p>}\r\n            {!isLoading && <div>\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{ques[currQues].question}</p>\r\n                </div>\r\n                <Options />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { useContext, Fragment } from 'react'\r\nimport QuizContext from '../store/quiz-context';\r\n\r\nconst Result = () => {\r\n    const quizContext = useContext(QuizContext);\r\n    if (quizContext.isLoading) {\r\n        return <p className='text-center'>Loading..</p>\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h1 className='text-center'>Thank You!</h1>\r\n            <p className='text-center'>{`You scored ${quizContext.score}/${quizContext.ques.length}`}</p>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Result;\r\n","import React, { useContext, useEffect } from 'react'\r\nimport QuizContext from '../store/quiz-context';\r\n\r\nconst SideNav = () => {\r\n    const { currQues, ques } = useContext(QuizContext);\r\n\r\n    useEffect(() => {\r\n        document.querySelectorAll(`#serial div span`).forEach(ele => ele.classList.remove('highlight'));\r\n        document.querySelector(`#serial div:nth-child(${currQues + 1}) span`).classList.add('highlight');\r\n    }, [currQues]);\r\n\r\n    return (\r\n        <div className='row align-items-center justify-content-between' id='serial' style={{ width: '14vw' }}>\r\n            {ques.map((q, index) => <div key={index} className='col-4 text-center my-2'><span className='circle'>{index + 1}</span></div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNav;\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Timer = (props) => {\r\n    const { initialMinute = 0, initialSeconds = 0 } = props;\r\n\r\n    const [minutes, setMinutes] = useState(initialMinute);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n\r\n    useEffect(() => {\r\n        let myInterval = setInterval(() => {\r\n            if (seconds > 0) {\r\n                setSeconds(seconds - 1);\r\n            }\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    clearInterval(myInterval)\r\n                } else {\r\n                    setMinutes(minutes - 1);\r\n                    setSeconds(59);\r\n                }\r\n            }\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(myInterval);\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className='text-center'>\r\n            {minutes === 0 && seconds === 0\r\n                ? props.isOver()\r\n                : <h1> {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React, { useContext, useState } from 'react';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport QuizContext from './store/quiz-context';\nimport Result from './pages/Result';\nimport SideNav from './components/SideNav';\nimport Timer from './components/Timer';\n\nconst App = () => {\n  const { currQues, ques, isLoading } = useContext(QuizContext);\n  const [timeLeft, setTimeLeft] = useState(true);\n\n  const timeHandler = () => {\n    setTimeLeft(false);\n  };\n\n  let content;\n\n  if (currQues < ques.length && timeLeft) {\n    content = <div className='d-flex justify-content-between flex-md-row flex-column'>\n      {!isLoading && <SideNav />}\n      <Quiz />\n      <Timer initialSeconds={10} isOver={timeHandler} />\n    </div>;\n  } else {\n    content = <Result />;\n  }\n\n  return (\n    <div className='container mt-3'>\n      {content}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { QuizContextProvider } from './store/quiz-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizContextProvider>\n      <App />\n    </QuizContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}